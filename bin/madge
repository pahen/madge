#!/usr/bin/env node

'use strict';

/**
 * Module dependencies
 */
var fs = require('fs'),
	version = require('../package.json').version,
	program = require('commander'),
	printResult = require('../lib/print'),
	madge = require('../lib/madge');

program
	.version(version)
	.usage('[options] <file|dir ...>')
	.option('-f, --format <name>', 'format to parse (amd/cjs/es6)', 'cjs')
	.option('-s, --summary', 'show summary of all dependencies')
	.option('-c, --circular', 'show circular dependencies')
	.option('-d, --depends <id>', 'show modules that depends on the given id')
	.option('-x, --exclude <regex>', 'a regular expression for excluding modules')
	.option('-t, --dot', 'output graph in the DOT language')
	.option('-i, --image <filename>', 'write graph to file as a PNG image')
	.option('-l, --layout <name>', 'layout engine to use for image graph (dot/neato/fdp/sfdp/twopi/circo)', 'dot')
	.option('-b, --break-on-error', 'break on parse errors & missing modules', false)
	.option('-n, --no-colors', 'skip colors in output and images', false)
	.option('-r, --read', 'skip scanning folders and read JSON from stdin')
	.option('-C, --config <filename>', 'provide a config file')
	.option('-R, --require-config <filename>', 'include shim dependencies and paths found in RequireJS config file')
	.option('-O, --optimized', 'if given file is optimized with r.js', false)
	.option('-N, --find-nested-dependencies', 'find nested dependencies in AMD modules', false)
	.option('-M, --main-require-module <name>', 'name of the primary RequireJS module, if it\'s included with `require()`', '')
	.option('-S, --squash <regex>', 'simplify dependency graph by squashing dependencies matching regex; e.g. C depends on B depends on A, squash B, results in C depends on A', '')
	.option('-a, --aliases <string>', 'aliases as comma separated list; e.g. A:A/index,B:B/index', '')
	.option('-j --json', 'output dependency tree in json')
	.option('-p --paths <directory>', 'additional comma separated paths to search for dependencies (CJS only)', '')
	.option('-e --extensions <list>', 'comma separated string of valid file extensions', 'js,coffee')
	.parse(process.argv);

if (!program.args.length && !program.read && !program.requireConfig) {
	console.log(program.helpInformation());
	process.exit(1);
}

var src = program.args;

// Check config file
if (program.config && fs.existsSync(program.config)) {
	var configOptions = JSON.parse(fs.readFileSync(program.config, 'utf8'));
	// Duck punch the program with the new options
	// Config file take precedence
	for (var k in configOptions) {
		if (configOptions.hasOwnProperty(k)) {
			program[k] = configOptions[k];
		}
	}
}

// Read from standard input
if (program.read) {
	var buffer = '';
	process.stdin.resume();
	process.stdin.setEncoding('utf8');
	process.stdin.on('data', function (chunk) {
		buffer += chunk;
	});
	process.stdin.on('end', function () {
		src = JSON.parse(buffer);
		run();
	});
} else {
	run();
}

function run() {
	 // Start parsing
	var res = madge(src, {
		format: program.format,
		breakOnError: program.breakOnError,
		exclude: program.exclude,
		optimized: program.optimized,
		requireConfig: program.requireConfig,
		mainRequireModule: program.mainRequireModule,
		paths: program.paths ? program.paths.split(',') : undefined,
		extensions: program.extensions.split(',').map(function (str) { return '.' + str; }),
		findNestedDependencies: program.findNestedDependencies,
		squash: program.squash,
		aliases: program.aliases ? program.aliases.split(',').map(function(pair) {return pair.split(':');}) : []
	});

	// Ouput summary
	if (program.summary) {
		printResult.summary(res.obj(), {
			colors: program.colors,
			output: program.output
		});

	// Output circular dependencies
	} else if (program.circular) {
		printResult.circular(res.circular(), {
			colors: program.colors,
			output: program.output
		});

	// Output module dependencies
	} else if (program.depends) {
		printResult.depends(res.depends(program.depends), {
			colors: program.colors,
			output: program.output
		});

	// Write image
	} else if (program.image) {
		res.image({
			colors: program.colors,
			layout: program.layout,
			fontFace: program.font,
			fontSize: program.fontSize,
			imageColors: program.imageColors
		}, function (image) {
			fs.writeFile(program.image, image, function (err) {
				if (err) {
					throw err;
				}
			});
		});

	// Output DOT
	} else if (program.dot) {
		process.stdout.write(res.dot());
	// Output JSON
	} else if(program.json) {
		process.stdout.write(JSON.stringify(res.tree) + '\n');
	// Output text (default)
	} else {
		printResult.list(res.obj(), {
			colors: program.colors,
			output: program.output
		});
	}
}
